{"version":3,"sources":["webpack:///../../../src/components/VGrid/VRow.ts","webpack:///./node_modules/quaternion/quaternion.js"],"names":["breakpoints","ALIGNMENT","makeProps","props","prefix","def","alignValidator","str","alignProps","type","default","validator","justifyValidator","justifyProps","alignContentValidator","alignContentProps","propMap","align","Object","justify","alignContent","classMap","breakpointClass","className","val","breakpoint","prop","cache","name","functional","tag","dense","noGutters","render","children","cacheKey","String","classList","value","h","data","staticClass","class","root","logHypot","a","b","_a","Math","abs","_b","log","cos","atan2","P","parse","dest","w","x","y","z","undefined","length","Error","tokens","match","plus","minus","iMap","i","c","d","g","isNaN","parseFloat","numToStr","n","char","prev","ret","Quaternion","this","prototype","sqrt","norm","w1","x1","y1","z1","w2","x2","y2","z2","s","normSq","vNorm","wExp","exp","scale","sin","qNorm2","arg","loh","pow","eps","isFinite","d2","wx","wy","wz","xx","xy","xz","yy","yz","zz","v","qw","qx","qy","qz","vx","vy","vz","tx","ty","tz","cosTheta0","pct","Theta0","acos","sinTheta0","Theta","sinTheta","cosTheta","s0","s1","axis","angle","halfAngle","sin_2","cos_2","sin_norm","u","dot","w3","normalize","u1","random","u2","u3","t","PI","phi","theta","psi","order","_x","_y","_z","cX","cY","cZ","sX","sY","sZ"],"mappings":"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","file":"js/chunk-41a6c350.6cc16c4f.js","sourcesContent":["import './VGrid.sass'\n\nimport Vue, { PropOptions } from 'vue'\nimport mergeData from '../../util/mergeData'\nimport { upperFirst } from '../../util/helpers'\n\n// no xs\nconst breakpoints = ['sm', 'md', 'lg', 'xl']\n\nconst ALIGNMENT = ['start', 'end', 'center']\n\nfunction makeProps (prefix: string, def: () => PropOptions) {\n  return breakpoints.reduce((props, val) => {\n    props[prefix + upperFirst(val)] = def()\n    return props\n  }, {} as Dictionary<PropOptions>)\n}\n\nconst alignValidator = (str: any) => [...ALIGNMENT, 'baseline', 'stretch'].includes(str)\nconst alignProps = makeProps('align', () => ({\n  type: String,\n  default: null,\n  validator: alignValidator,\n}))\n\nconst justifyValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around'].includes(str)\nconst justifyProps = makeProps('justify', () => ({\n  type: String,\n  default: null,\n  validator: justifyValidator,\n}))\n\nconst alignContentValidator = (str: any) => [...ALIGNMENT, 'space-between', 'space-around', 'stretch'].includes(str)\nconst alignContentProps = makeProps('alignContent', () => ({\n  type: String,\n  default: null,\n  validator: alignContentValidator,\n}))\n\nconst propMap = {\n  align: Object.keys(alignProps),\n  justify: Object.keys(justifyProps),\n  alignContent: Object.keys(alignContentProps),\n}\n\nconst classMap = {\n  align: 'align',\n  justify: 'justify',\n  alignContent: 'align-content',\n}\n\nfunction breakpointClass (type: keyof typeof propMap, prop: string, val: string) {\n  let className = classMap[type]\n  if (val == null) {\n    return undefined\n  }\n  if (prop) {\n    // alignSm -> Sm\n    const breakpoint = prop.replace(type, '')\n    className += `-${breakpoint}`\n  }\n  // .align-items-sm-center\n  className += `-${val}`\n  return className.toLowerCase()\n}\n\nconst cache = new Map<string, any[]>()\n\nexport default Vue.extend({\n  name: 'v-row',\n  functional: true,\n  props: {\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    dense: Boolean,\n    noGutters: Boolean,\n    align: {\n      type: String,\n      default: null,\n      validator: alignValidator,\n    },\n    ...alignProps,\n    justify: {\n      type: String,\n      default: null,\n      validator: justifyValidator,\n    },\n    ...justifyProps,\n    alignContent: {\n      type: String,\n      default: null,\n      validator: alignContentValidator,\n    },\n    ...alignContentProps,\n  },\n  render (h, { props, data, children }) {\n    // Super-fast memoization based on props, 5x faster than JSON.stringify\n    let cacheKey = ''\n    for (const prop in props) {\n      cacheKey += String((props as any)[prop])\n    }\n    let classList = cache.get(cacheKey)\n\n    if (!classList) {\n      classList = []\n      // Loop through `align`, `justify`, `alignContent` breakpoint props\n      let type: keyof typeof propMap\n      for (type in propMap) {\n        propMap[type].forEach(prop => {\n          const value: string = (props as any)[prop]\n          const className = breakpointClass(type, prop, value)\n          if (className) classList!.push(className)\n        })\n      }\n\n      classList.push({\n        'no-gutters': props.noGutters,\n        'row--dense': props.dense,\n        [`align-${props.align}`]: props.align,\n        [`justify-${props.justify}`]: props.justify,\n        [`align-content-${props.alignContent}`]: props.alignContent,\n      })\n\n      cache.set(cacheKey, classList)\n    }\n\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'row',\n        class: classList,\n      }),\n      children\n    )\n  },\n})\n","/**\n * @license Quaternion.js v1.2.1 27/07/2021\n *\n * Copyright (c) 2021, Robert Eisele (robert@xarg.org)\n * Licensed under the MIT license.\n **/\n(function (root) {\n\n  'use strict';\n\n  /**\n   * Calculates log(sqrt(a^2+b^2)) in a way to avoid overflows\n   *\n   * @param {number} a\n   * @param {number} b\n   * @returns {number}\n   */\n  function logHypot(a, b) {\n\n    var _a = Math.abs(a);\n    var _b = Math.abs(b);\n\n    if (a === 0) {\n      return Math.log(_b);\n    }\n\n    if (b === 0) {\n      return Math.log(_a);\n    }\n\n    if (_a < 3000 && _b < 3000) {\n      return Math.log(a * a + b * b) * 0.5;\n    }\n\n    return Math.log(a / Math.cos(Math.atan2(b, a)));\n  }\n\n  /*\n   * Default is the multiplicative one element\n   *\n   */\n  var P = {\n    'w': 1,\n    'x': 0,\n    'y': 0,\n    'z': 0\n  };\n\n  function parse(dest, w, x, y, z) {\n\n    // Most common internal use case with 4 params\n    if (z !== undefined) {\n      dest['w'] = w;\n      dest['x'] = x;\n      dest['y'] = y;\n      dest['z'] = z;\n      return;\n    }\n\n    if (typeof w === 'object' && y === undefined) {\n\n      // Check for quats, for example when an object gets cloned\n      if ('w' in w || 'x' in w || 'y' in w || 'z' in w) {\n        dest['w'] = w['w'] || 0;\n        dest['x'] = w['x'] || 0;\n        dest['y'] = w['y'] || 0;\n        dest['z'] = w['z'] || 0;\n        return;\n      }\n\n      // Check for complex numbers\n      if ('re' in w && 'im' in w) {\n        dest['w'] = w['re'];\n        dest['x'] = w['im'];\n        dest['y'] = 0;\n        dest['z'] = 0;\n        return;\n      }\n\n      // Check for array\n      if (w.length === 4) {\n        dest['w'] = w[0];\n        dest['x'] = w[1];\n        dest['y'] = w[2];\n        dest['z'] = w[3];\n        return;\n      }\n\n      // Check for augmented vector\n      if (w.length === 3) {\n        dest['w'] = 0;\n        dest['x'] = w[0];\n        dest['y'] = w[1];\n        dest['z'] = w[2];\n        return;\n      }\n\n      throw new Error('Invalid object');\n    }\n\n    // Parse string values\n    if (typeof w === 'string' && y === undefined) {\n\n      var tokens = w.match(/\\d+\\.?\\d*e[+-]?\\d+|\\d+\\.?\\d*|\\.\\d+|./g);\n      var plus = 1;\n      var minus = 0;\n\n      var iMap = { 'i': 'x', 'j': 'y', 'k': 'z' };\n\n      if (tokens === null) {\n        throw new Error('Parse error');\n      }\n\n      // Reset the current state\n      dest['w'] =\n        dest['x'] =\n        dest['y'] =\n        dest['z'] = 0;\n\n      for (var i = 0; i < tokens.length; i++) {\n\n        var c = tokens[i];\n        var d = tokens[i + 1];\n\n        if (c === ' ' || c === '\\t' || c === '\\n') {\n          /* void */\n        } else if (c === '+') {\n          plus++;\n        } else if (c === '-') {\n          minus++;\n        } else {\n\n          if (plus + minus === 0) {\n            throw new Error('Parse error' + c);\n          }\n          var g = iMap[c];\n\n          // Is the current token an imaginary sign?\n          if (g !== undefined) {\n\n            // Is the following token a number?\n            if (d !== ' ' && !isNaN(d)) {\n              c = d;\n              i++;\n            } else {\n              c = '1';\n            }\n\n          } else {\n\n            if (isNaN(c)) {\n              throw new Error('Parser error');\n            }\n\n            g = iMap[d];\n\n            if (g !== undefined) {\n              i++;\n            }\n          }\n\n          dest[g || 'w'] += parseFloat((minus % 2 ? '-' : '') + c);\n          plus = minus = 0;\n        }\n      }\n\n      // Still something on the stack\n      if (plus + minus > 0) {\n        throw new Error('Parser error');\n      }\n      return;\n    }\n\n    // If no single variable was given AND it was the constructor, set it to the identity\n    if (w === undefined && dest !== P) {\n      dest['w'] = 1;\n      dest['x'] =\n        dest['y'] =\n        dest['z'] = 0;\n    } else {\n\n      dest['w'] = w || 0;\n\n      // Note: This isn't setFromAxis, it's just syntactic sugar!\n      if (x && x.length === 3) {\n        dest['x'] = x[0];\n        dest['y'] = x[1];\n        dest['z'] = x[2];\n      } else {\n        dest['x'] = x || 0;\n        dest['y'] = y || 0;\n        dest['z'] = z || 0;\n      }\n    }\n  }\n\n  function numToStr(n, char, prev) {\n\n    var ret = '';\n\n    if (n !== 0) {\n\n      if (prev !== '') {\n        ret += n < 0 ? ' - ' : ' + ';\n      } else if (n < 0) {\n        ret += '-';\n      }\n\n      n = Math.abs(n);\n\n      if (1 !== n || char === '') {\n        ret += n;\n      }\n      ret += char;\n    }\n    return ret;\n  }\n\n  /**\n   * Quaternion constructor\n   *\n   * @constructor\n   * @param {number|Object|string} w real\n   * @param {number=} x imag\n   * @param {number=} y imag\n   * @param {number=} z imag\n   * @returns {Quaternion}\n   */\n  function Quaternion(w, x, y, z) {\n\n    if (!(this instanceof Quaternion)) {\n      return new Quaternion(w, x, y, z);\n    }\n\n    parse(this, w, x, y, z);\n  }\n\n  Quaternion.prototype = {\n    'w': 1,\n    'x': 0,\n    'y': 0,\n    'z': 0,\n    /**\n     * Adds two quaternions Q1 and Q2\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'add': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 + Q2 := [w1, v1] + [w2, v2] = [w1 + w2, v1 + v2]\n\n      return new Quaternion(\n        this['w'] + P['w'],\n        this['x'] + P['x'],\n        this['y'] + P['y'],\n        this['z'] + P['z']);\n    },\n    /**\n     * Subtracts a quaternions Q2 from Q1\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'sub': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 - Q2 := Q1 + (-Q2)\n      //          = [w1, v1] - [w2, v2] = [w1 - w2, v1 - v2]\n\n      return new Quaternion(\n        this['w'] - P['w'],\n        this['x'] - P['x'],\n        this['y'] - P['y'],\n        this['z'] - P['z']);\n    },\n    /**\n     * Calculates the additive inverse, or simply it negates the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'neg': function () {\n\n      // -Q := [-w, -v]\n\n      return new Quaternion(-this['w'], -this['x'], -this['y'], -this['z']);\n    },\n    /**\n     * Calculates the length/modulus/magnitude or the norm of a quaternion\n     *\n     * @returns {number}\n     */\n    'norm': function () {\n\n      // |Q| := sqrt(|Q|^2)\n\n      // The unit quaternion has |Q| = 1\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      return Math.sqrt(w * w + x * x + y * y + z * z);\n    },\n    /**\n     * Calculates the squared length/modulus/magnitude or the norm of a quaternion\n     *\n     * @returns {number}\n     */\n    'normSq': function () {\n\n      // |Q|^2 := [w, v] * [w, -v]\n      //        = [w^2 + dot(v, v), -w * v + w * v + cross(v, -v)]\n      //        = [w^2 + |v|^2, 0]\n      //        = [w^2 + dot(v, v), 0]\n      //        = dot(Q, Q)\n      //        = Q * Q'\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      return w * w + x * x + y * y + z * z;\n    },\n    /**\n     * Normalizes the quaternion to have |Q| = 1 as long as the norm is not zero\n     * Alternative names are the signum, unit or versor\n     *\n     * @returns {Quaternion}\n     */\n    'normalize': function () {\n\n      // Q* := Q / |Q|\n\n      // unrolled Q.scale(1 / Q.norm())\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var norm = Math.sqrt(w * w + x * x + y * y + z * z);\n\n      if (norm < Quaternion['EPSILON']) {\n        return Quaternion['ZERO'];\n      }\n\n      norm = 1 / norm;\n\n      return new Quaternion(w * norm, x * norm, y * norm, z * norm);\n    },\n    /**\n     * Calculates the Hamilton product of two quaternions\n     * Leaving out the imaginary part results in just scaling the quat\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'mul': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 * Q2 = [w1 * w2 - dot(v1, v2), w1 * v2 + w2 * v1 + cross(v1, v2)]\n\n      // Not commutative because cross(v1, v2) != cross(v2, v1)!\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n\n      return new Quaternion(\n        w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2,\n        w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2,\n        w1 * y2 + y1 * w2 + z1 * x2 - x1 * z2,\n        w1 * z2 + z1 * w2 + x1 * y2 - y1 * x2);\n    },\n    /**\n     * Scales a quaternion by a scalar, faster than using multiplication\n     *\n     * @param {number} s scaling factor\n     * @returns {Quaternion}\n     */\n    'scale': function (s) {\n\n      return new Quaternion(\n        this['w'] * s,\n        this['x'] * s,\n        this['y'] * s,\n        this['z'] * s);\n    },\n    /**\n     * Calculates the dot product of two quaternions\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {number}\n     */\n    'dot': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // dot(Q1, Q2) := w1 * w2 + dot(v1, v2)\n\n      return this['w'] * P['w'] + this['x'] * P['x'] + this['y'] * P['y'] + this['z'] * P['z'];\n    },\n    /**\n     * Calculates the inverse of a quat for non-normalized quats such that\n     * Q^-1 * Q = 1 and Q * Q^-1 = 1\n     *\n     * @returns {Quaternion}\n     */\n    'inverse': function () {\n\n      // Q^-1 := Q' / |Q|^2\n      //       = [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)]\n\n      // Proof:\n      // Q * Q^-1 = [w, v] * [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)]\n      //          = [1, 0]\n      // Q^-1 * Q = [w / (w^2 + |v|^2), -v / (w^2 + |v|^2)] * [w, v]\n      //          = [1, 0].\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var normSq = w * w + x * x + y * y + z * z;\n\n      if (normSq === 0) {\n        return Quaternion['ZERO']; // TODO: Is the result zero or one when the norm is zero?\n      }\n\n      normSq = 1 / normSq;\n\n      return new Quaternion(w * normSq, -x * normSq, -y * normSq, -z * normSq);\n    },\n    /**\n     * Multiplies a quaternion with the inverse of a second quaternion\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'div': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // Q1 / Q2 := Q1 * Q2^-1\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n\n      var normSq = w2 * w2 + x2 * x2 + y2 * y2 + z2 * z2;\n\n      if (normSq === 0) {\n        return Quaternion['ZERO']; // TODO: Is the result zero or one when the norm is zero?\n      }\n\n      normSq = 1 / normSq;\n\n      return new Quaternion(\n        (w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2) * normSq,\n        (x1 * w2 - w1 * x2 - y1 * z2 + z1 * y2) * normSq,\n        (y1 * w2 - w1 * y2 - z1 * x2 + x1 * z2) * normSq,\n        (z1 * w2 - w1 * z2 - x1 * y2 + y1 * x2) * normSq);\n    },\n    /**\n     * Calculates the conjugate of a quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'conjugate': function () {\n\n      // Q' = [s, -v]\n\n      // If the quaternion is normalized,\n      // the conjugate is the inverse of the quaternion - but faster\n      // Q' * Q = Q * Q' = 1\n\n      // Additionally, the conjugate of a unit quaternion is a rotation with the same\n      // angle but the opposite axis.\n\n      // Moreover the following property holds:\n      // (Q1 * Q2)' = Q2' * Q1'\n\n      return new Quaternion(this['w'], -this['x'], -this['y'], -this['z']);\n    },\n    /**\n     * Calculates the natural exponentiation of the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'exp': function () {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var vNorm = Math.sqrt(x * x + y * y + z * z);\n      var wExp = Math.exp(w);\n      var scale = wExp / vNorm * Math.sin(vNorm);\n\n      if (vNorm === 0) {\n        //return new Quaternion(wExp * Math.cos(vNorm), 0, 0, 0);\n        return new Quaternion(wExp, 0, 0, 0);\n      }\n\n      return new Quaternion(\n        wExp * Math.cos(vNorm),\n        x * scale,\n        y * scale,\n        z * scale);\n    },\n    /**\n     * Calculates the natural logarithm of the quaternion\n     *\n     * @returns {Quaternion}\n     */\n    'log': function () {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      if (y === 0 && z === 0) {\n        return new Quaternion(\n          logHypot(w, x),\n          Math.atan2(x, w), 0, 0);\n      }\n\n      var qNorm2 = x * x + y * y + z * z + w * w;\n      var vNorm = Math.sqrt(x * x + y * y + z * z);\n\n      var scale = Math.atan2(vNorm, w) / vNorm;\n\n      return new Quaternion(\n        Math.log(qNorm2) * 0.5,\n        x * scale,\n        y * scale,\n        z * scale);\n    },\n    /**\n     * Calculates the power of a quaternion raised to a real number or another quaternion\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {Quaternion}\n     */\n    'pow': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      if (P['y'] === 0 && P['z'] === 0) {\n\n        if (P['w'] === 1 && P['x'] === 0) {\n          return this;\n        }\n\n        if (P['w'] === 0 && P['x'] === 0) {\n          return Quaternion['ONE'];\n        }\n\n        // Check if we can operate in C\n        // Borrowed from complex.js\n        if (this['y'] === 0 && this['z'] === 0) {\n\n          var a = this['w'];\n          var b = this['x'];\n\n          if (a === 0 && b === 0) {\n            return Quaternion['ZERO'];\n          }\n\n          var arg = Math.atan2(b, a);\n          var loh = logHypot(a, b);\n\n          if (P['x'] === 0) {\n\n            if (b === 0 && a >= 0) {\n\n              return new Quaternion(Math.pow(a, P['w']), 0, 0, 0);\n\n            } else if (a === 0) {\n\n              switch (P['w'] % 4) {\n                case 0:\n                  return new Quaternion(Math.pow(b, P['w']), 0, 0, 0);\n                case 1:\n                  return new Quaternion(0, Math.pow(b, P['w']), 0, 0);\n                case 2:\n                  return new Quaternion(-Math.pow(b, P['w']), 0, 0, 0);\n                case 3:\n                  return new Quaternion(0, -Math.pow(b, P['w']), 0, 0);\n              }\n            }\n          }\n\n          a = Math.exp(P['w'] * loh - P['x'] * arg);\n          b = P['x'] * loh + P['w'] * arg;\n          return new Quaternion(\n            a * Math.cos(b),\n            a * Math.sin(b), 0, 0);\n        }\n      }\n\n      // Normal quaternion behavior\n      // q^p = e^ln(q^p) = e^(ln(q)*p)\n      return this['log']()['mul'](P)['exp']();\n    },\n    /**\n     * Checks if two quats are the same\n     *\n     * @param {number|Object|string} w real\n     * @param {number=} x imag\n     * @param {number=} y imag\n     * @param {number=} z imag\n     * @returns {boolean}\n     */\n    'equals': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      var eps = Quaternion['EPSILON'];\n\n      // maybe check for NaN's here?\n      return Math.abs(P['w'] - this['w']) < eps\n        && Math.abs(P['x'] - this['x']) < eps\n        && Math.abs(P['y'] - this['y']) < eps\n        && Math.abs(P['z'] - this['z']) < eps;\n    },\n    /**\n     * Checks if all parts of a quaternion are finite\n     *\n     * @returns {boolean}\n     */\n    'isFinite': function () {\n\n      return isFinite(this['w']) && isFinite(this['x']) && isFinite(this['y']) && isFinite(this['z']);\n    },\n    /**\n     * Checks if any of the parts of the quaternion is not a number\n     *\n     * @returns {boolean}\n     */\n    'isNaN': function () {\n\n      return isNaN(this['w']) || isNaN(this['x']) || isNaN(this['y']) || isNaN(this['z']);\n    },\n    /**\n     * Gets the Quaternion as a well formatted string\n     *\n     * @returns {string}\n     */\n    'toString': function () {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n      var ret = '';\n\n      if (isNaN(w) || isNaN(x) || isNaN(y) || isNaN(z)) {\n        return 'NaN';\n      }\n\n      // Alternative design?\n      // '(%f, [%f %f %f])'\n\n      ret = numToStr(w, '', ret);\n      ret += numToStr(x, 'i', ret);\n      ret += numToStr(y, 'j', ret);\n      ret += numToStr(z, 'k', ret);\n\n      if ('' === ret)\n        return '0';\n\n      return ret;\n    },\n    /**\n     * Returns the real part of the quaternion\n     *\n     * @returns {number}\n     */\n    'real': function () {\n\n      return this['w'];\n    },\n    /**\n     * Returns the imaginary part of the quaternion as a 3D vector / array\n     *\n     * @returns {Array}\n     */\n    'imag': function () {\n\n      return [this['x'], this['y'], this['z']];\n    },\n    /**\n     * Gets the actual quaternion as a 4D vector / array\n     *\n     * @returns {Array}\n     */\n    'toVector': function () {\n\n      return [this['w'], this['x'], this['y'], this['z']];\n    },\n    /**\n     * Calculates the 3x3 rotation matrix for the current quat\n     *\n     * @param {boolean=} d2\n     * @see https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion\n     * @returns {Array}\n     */\n    'toMatrix': function (d2) {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var n = w * w + x * x + y * y + z * z;\n      var s = n === 0 ? 0 : 2 / n;\n      var wx = s * w * x, wy = s * w * y, wz = s * w * z;\n      var xx = s * x * x, xy = s * x * y, xz = s * x * z;\n      var yy = s * y * y, yz = s * y * z, zz = s * z * z;\n\n      if (d2) {\n        return [\n          [1 - (yy + zz), xy - wz, xz + wy],\n          [xy + wz, 1 - (xx + zz), yz - wx],\n          [xz - wy, yz + wx, 1 - (xx + yy)]];\n      }\n\n      return [\n        1 - (yy + zz), xy - wz, xz + wy,\n        xy + wz, 1 - (xx + zz), yz - wx,\n        xz - wy, yz + wx, 1 - (xx + yy)];\n    },\n    /**\n     * Calculates the homogeneous 4x4 rotation matrix for the current quat\n     *\n     * @param {boolean=} d2\n     * @returns {Array}\n     */\n    'toMatrix4': function (d2) {\n\n      var w = this['w'];\n      var x = this['x'];\n      var y = this['y'];\n      var z = this['z'];\n\n      var n = w * w + x * x + y * y + z * z;\n      var s = n === 0 ? 0 : 2 / n;\n      var wx = s * w * x, wy = s * w * y, wz = s * w * z;\n      var xx = s * x * x, xy = s * x * y, xz = s * x * z;\n      var yy = s * y * y, yz = s * y * z, zz = s * z * z;\n\n      if (d2) {\n        return [\n          [1 - (yy + zz), xy - wz, xz + wy, 0],\n          [xy + wz, 1 - (xx + zz), yz - wx, 0],\n          [xz - wy, yz + wx, 1 - (xx + yy), 0],\n          [0, 0, 0, 1]];\n      }\n\n      return [\n        1 - (yy + zz), xy - wz, xz + wy, 0,\n        xy + wz, 1 - (xx + zz), yz - wx, 0,\n        xz - wy, yz + wx, 1 - (xx + yy), 0,\n        0, 0, 0, 1];\n    },\n    /**\n     * Clones the actual object\n     *\n     * @returns {Quaternion}\n     */\n    'clone': function () {\n\n      return new Quaternion(this);\n    },\n    /**\n     * Rotates a vector according to the current quaternion, assumes |q|=1\n     *\n     * @param {Array} v The vector to be rotated\n     * @returns {Array}\n     */\n    'rotateVector': function (v) {\n\n      var qw = this['w'];\n      var qx = this['x'];\n      var qy = this['y'];\n      var qz = this['z'];\n\n      var vx = v[0];\n      var vy = v[1];\n      var vz = v[2];\n\n      // t = 2q x v\n      var tx = 2 * (qy * vz - qz * vy);\n      var ty = 2 * (qz * vx - qx * vz);\n      var tz = 2 * (qx * vy - qy * vx);\n\n      // v + w t + q x t\n      return [\n        vx + qw * tx + qy * tz - qz * ty,\n        vy + qw * ty + qz * tx - qx * tz,\n        vz + qw * tz + qx * ty - qy * tx];\n    },\n\n    'slerp': function (w, x, y, z) {\n\n      parse(P, w, x, y, z);\n\n      // slerp(Q1, Q2, t) := Q1(Q1^-1 Q2)^t\n\n      var w1 = this['w'];\n      var x1 = this['x'];\n      var y1 = this['y'];\n      var z1 = this['z'];\n\n      var w2 = P['w'];\n      var x2 = P['x'];\n      var y2 = P['y'];\n      var z2 = P['z'];\n\n      var cosTheta0 = w1 * w2 + x1 * x2 + y1 * y2 + z1 * z2;\n\n      if (cosTheta0 < 0) {\n        w1 = -w1;\n        x1 = -x1;\n        y1 = -y1;\n        z1 = -z1;\n        cosTheta0 = -cosTheta0;\n      }\n\n      if (cosTheta0 > 0.9995) { // DOT_THRESHOLD\n        return function (pct) {\n          return new Quaternion(\n            w1 + pct * (w2 - w1),\n            x1 + pct * (x2 - x1),\n            y1 + pct * (y2 - y1),\n            z1 + pct * (z2 - z1))['normalize']();\n        };\n      }\n\n      var Theta0 = Math.acos(cosTheta0);\n      var sinTheta0 = Math.sin(Theta0);\n\n      return function (pct) {\n\n        var Theta = Theta0 * pct;\n        var sinTheta = Math.sin(Theta);\n        var cosTheta = Math.cos(Theta);\n\n        var s0 = cosTheta - cosTheta0 * sinTheta / sinTheta0;\n        var s1 = sinTheta / sinTheta0;\n\n        return new Quaternion(\n          s0 * w1 + s1 * w2,\n          s0 * x1 + s1 * x2,\n          s0 * y1 + s1 * y2,\n          s0 * z1 + s1 * z2);\n      }\n    }\n  };\n\n  Quaternion['ZERO'] = new Quaternion(0, 0, 0, 0); // This is the additive identity Quaternion\n  Quaternion['ONE'] = new Quaternion(1, 0, 0, 0); // This is the multiplicative identity Quaternion\n  Quaternion['I'] = new Quaternion(0, 1, 0, 0);\n  Quaternion['J'] = new Quaternion(0, 0, 1, 0);\n  Quaternion['K'] = new Quaternion(0, 0, 0, 1);\n  Quaternion['EPSILON'] = 1e-16;\n\n  /**\n   * Creates quaternion by a rotation given as axis-angle orientation\n   *\n   * @param {Array} axis The axis around which to rotate\n   * @param {number} angle The angle in radians\n   * @returns {Quaternion}\n   */\n  Quaternion['fromAxisAngle'] = function (axis, angle) {\n\n    // Q = [cos(angle / 2), v * sin(angle / 2)]\n\n    var halfAngle = angle * 0.5;\n\n    var a = axis[0];\n    var b = axis[1];\n    var c = axis[2];\n\n    var sin_2 = Math.sin(halfAngle);\n    var cos_2 = Math.cos(halfAngle);\n\n    var sin_norm = sin_2 / Math.sqrt(a * a + b * b + c * c);\n\n    return new Quaternion(cos_2, a * sin_norm, b * sin_norm, c * sin_norm);\n  };\n\n  /**\n   * Calculates the quaternion to rotate one vector onto the other\n   *\n   * @param {Array} u\n   * @param {Array} v\n   */\n  Quaternion['fromBetweenVectors'] = function (u, v) {\n\n    var a = u[0];\n    var b = u[1];\n    var c = u[2];\n\n    var x = v[0];\n    var y = v[1];\n    var z = v[2];\n\n    var dot = a * x + b * y + c * z;\n    var w1 = b * z - c * y;\n    var w2 = c * x - a * z;\n    var w3 = a * y - b * x;\n\n    return new Quaternion(\n      dot + Math.sqrt(dot * dot + w1 * w1 + w2 * w2 + w3 * w3),\n      w1,\n      w2,\n      w3\n    ).normalize();\n  };\n\n  /**\n   * Gets a spherical random number\n   * @link http://planning.cs.uiuc.edu/node198.html\n   */\n  Quaternion['random'] = function () {\n\n    var u1 = Math.random();\n    var u2 = Math.random();\n    var u3 = Math.random();\n\n    var s = Math.sqrt(1 - u1);\n    var t = Math.sqrt(u1);\n\n    return new Quaternion(\n      t * Math.cos(2 * Math.PI * u3),\n      s * Math.sin(2 * Math.PI * u2),\n      s * Math.cos(2 * Math.PI * u2),\n      t * Math.sin(2 * Math.PI * u3)\n    );\n  };\n\n  /**\n   * Creates a quaternion by a rotation given by Euler angles\n   *\n   * @param {number} phi\n   * @param {number} theta\n   * @param {number} psi\n   * @param {string=} order\n   * @returns {Quaternion}\n   */\n  Quaternion['fromEuler'] = function (phi, theta, psi, order) {\n\n    var _x = phi * 0.5;\n    var _y = theta * 0.5;\n    var _z = psi * 0.5;\n\n    var cX = Math.cos(_x);\n    var cY = Math.cos(_y);\n    var cZ = Math.cos(_z);\n\n    var sX = Math.sin(_x);\n    var sY = Math.sin(_y);\n    var sZ = Math.sin(_z);\n\n    if (order === undefined || order === 'ZXY') {\n      // axisAngle([0, 0, 1], x) * axisAngle([1, 0, 0], y) * axisAngle([0, 1, 0], z)\n      return new Quaternion(\n        cX * cY * cZ - sX * sY * sZ,\n        cX * cZ * sY - cY * sX * sZ,\n        cX * cY * sZ + cZ * sX * sY,\n        cY * cZ * sX + cX * sY * sZ);\n    }\n\n    if (order === 'XYZ' || order === 'RPY') {\n      // axisAngle([1, 0, 0], x) * axisAngle([0, 1, 0], y) * axisAngle([0, 0, 1], z)\n      return new Quaternion(\n        cX * cY * cZ - sX * sY * sZ,\n        cY * cZ * sX + cX * sY * sZ,\n        cX * cZ * sY - cY * sX * sZ,\n        cX * cY * sZ + cZ * sX * sY);\n    }\n\n    if (order === 'YXZ') {\n      // axisAngle([0, 1, 0], x) * axisAngle([1, 0, 0], y) * axisAngle([0, 0, 1], z)\n      return new Quaternion(\n        cX * cY * cZ + sX * sY * sZ,\n        cX * cZ * sY + cY * sX * sZ,\n        cY * cZ * sX - cX * sY * sZ,\n        cX * cY * sZ - cZ * sX * sY);\n    }\n\n    if (order === 'ZYX' || order === 'YPR') {\n      // axisAngle([0, 0, 1], x) * axisAngle([0, 1, 0], y) * axisAngle([1, 0, 0], z)\n      return new Quaternion(\n        cX * cY * cZ + sX * sY * sZ,\n        cX * cY * sZ - cZ * sX * sY,\n        cX * cZ * sY + cY * sX * sZ,\n        cY * cZ * sX - cX * sY * sZ);\n    }\n\n    if (order === 'YZX') {\n      // axisAngle([0, 1, 0], x) * axisAngle([0, 0, 1], y) * axisAngle([1, 0, 0], z)\n      return new Quaternion(\n        cX * cY * cZ - sX * sY * sZ,\n        cX * cY * sZ + cZ * sX * sY,\n        cY * cZ * sX + cX * sY * sZ,\n        cX * cZ * sY - cY * sX * sZ);\n    }\n\n    if (order === 'XZY') {\n      // axisAngle([1, 0, 0], x) * axisAngle([0, 0, 1], z) * axisAngle([0, 1, 0], y)\n      return new Quaternion(\n        cX * cY * cZ + sX * sY * sZ,\n        cY * cZ * sX - cX * sY * sZ,\n        cX * cY * sZ - cZ * sX * sY,\n        cX * cZ * sY + cY * sX * sZ);\n    }\n    return null;\n  };\n\n  if (typeof define === 'function' && define['amd']) {\n    define([], function () {\n      return Quaternion;\n    });\n  } else if (typeof exports === 'object') {\n    Object.defineProperty(Quaternion, \"__esModule\", { 'value': true });\n    Quaternion['default'] = Quaternion;\n    Quaternion['Quaternion'] = Quaternion;\n    module['exports'] = Quaternion;\n  } else {\n    root['Quaternion'] = Quaternion;\n  }\n\n})(this);\n"],"sourceRoot":""}